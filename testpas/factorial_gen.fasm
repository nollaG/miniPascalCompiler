format elf64 executable 3
entry _main

segment readable executable
fact:
push rbp
mov rbp,rsp
sub rsp,8
lea rax,[rbp+16]
mov rax,[rax]
push rax
mov rax,1
pop rbx
cmp rbx,rax
je .L0
mov rbx,0
jmp .L1
.L0: mov rbx,1
.L1: cmp rbx,0
je .L2
lea rax,[rbp-8]
push rax
mov rax,1
pop rbx
mov [rbx],rax
jmp .L3
.L2: lea rax,[rbp-8]
push rax
lea rax,[rbp+16]
mov rax,[rax]
push rax
mov rax,1
pop rbx
sub rbx,rax
push rbx
call fact
add rsp,8
push rax
lea rax,[rbp+16]
mov rax,[rax]
pop rbx
imul rbx,rax
pop rax
mov [rax],rbx
.L3: lea rax,[rbp-8]
mov rax,[rax]
mov rsp,rbp
pop rbp
ret
outputNum:
push rbp
mov rbp,rsp
sub rsp,176
lea rax,[rbp-176]
push rax
mov rax,1
pop rbx
mov [rbx],rax
lea rax,[rbp+16]
mov rax,[rax]
push rax
mov rax,0
pop rbx
cmp rbx,rax
jne .L4
mov rbx,0
jmp .L5
.L4: mov rbx,1
.L5: cmp rbx,0
je .L6
.L7: lea rax,[rbp-160]
lea rbx,[rbp-176]
mov rbx,[rbx]
sub rbx,1
lea rax,[rax+rbx*8]
push rax
lea rax,[rbp+16]
mov rax,[rax]
push rax
mov rax,10
mov rbx,rax
pop rax
xor rdx,rdx
idiv rbx
pop rax
mov [rax],rdx
lea rax,[rbp-176]
push rax
lea rax,[rbp-176]
mov rax,[rax]
push rax
mov rax,1
pop rbx
add rbx,rax
pop rax
mov [rax],rbx
lea rax,[rbp+16]
push rax
lea rax,[rbp+16]
mov rax,[rax]
push rax
mov rax,10
mov rbx,rax
pop rax
xor rdx,rdx
idiv rbx
pop rbx
mov [rbx],rax
lea rax,[rbp+16]
mov rax,[rax]
push rax
mov rax,0
pop rbx
cmp rbx,rax
jne .L8
mov rbx,0
jmp .L9
.L8: mov rbx,1
.L9: cmp rbx,0
jne .L7
.L6: lea rax,[rbp-168]
push rax
lea rax,[rbp-176]
mov rax,[rax]
push rax
mov rax,1
pop rbx
sub rbx,rax
pop rax
mov [rax],rbx
lea rax,[rbp-168]
push rax
mov rax,1
pop rbx
mov rbx,[rbx]
cmp rbx,rax
jl .L10
.L11: push rax
push rbx
push rcx
push rdx
mov rax,48
push rax
lea rax,[rbp-160]
lea rbx,[rbp-168]
mov rbx,[rbx]
sub rbx,1
lea rax,[rax+rbx*8]
mov rax,[rax]
pop rbx
add rbx,rax
mov [io_buf],bl
mov rax,4   ;write
mov rbx,1   ;stdout
mov rcx,io_buf
mov rdx,1   ;len
int 0x80    ;syscall
pop rdx
pop rcx
pop rbx
pop rax
lea rax,[rbp-168]
mov rax,[rax]
sub rax,1
push rax
lea rax,[rbp-168]
pop rbx
mov [rax],rbx
mov rax,1
cmp rbx,rax
jge .L11
.L10: push rax
push rbx
push rcx
push rdx
mov rax,10
mov [io_buf],al
mov rax,4   ;write
mov rbx,1   ;stdout
mov rcx,io_buf
mov rdx,1   ;len
int 0x80    ;syscall
pop rdx
pop rcx
pop rbx
pop rax
mov rsp,rbp
pop rbp
ret
_main:
mov rax,4
push rax
call fact
add rsp,8
push rax
call outputNum
add rsp,8
mov rax,10
push rax
call fact
add rsp,8
push rax
call outputNum
add rsp,8
mov rbx,0   ;exit(0)
mov rax,1
int 0x80
segment readable writeable
io_buf rb 1
