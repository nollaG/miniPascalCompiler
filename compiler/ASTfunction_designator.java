/* Generated By:JJTree: Do not edit this line. ASTfunction_designator.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package compiler;

import java.util.ArrayList;

import codeGenerator.GenerateException;
import codeGenerator.GeneratorContext;
import codeGenerator.Register;
import codeGenerator.Type;

public
class ASTfunction_designator extends SimpleNode {
  public ASTfunction_designator(int id) {
    super(id);
  }

  public ASTfunction_designator(Pascal p, int id) {
    super(p, id);
  }
  
  public Register generateCode(GeneratorContext gc) throws GenerateException{//return variable type
	  if (children!=null && children.length>0) {
		  if (children[0]!=null && children[0] instanceof ASTidentifier) {
			  String function_name="";
			  Token functionToken=((ASTidentifier)children[0]).getToken();
			  if (gc.globalFunctionMap.containsKey(functionToken.image)) {
				  if (gc.generate) {
					  function_name=functionToken.image;
				  }
			  } else {
				  throw new GenerateException(String.format("No such Function '%s'!",functionToken.image),functionToken);
			  }
			  if (children.length>1) {
				  if (children[1]!=null && children[1] instanceof ASTactual_parameter_list) {
					  ArrayList<Type> at=((ASTactual_parameter_list)children[1]).getParameterList(gc);
					  if (!gc.globalFunctionMap.get(functionToken.image).checkParameter(at)) {
						  throw new GenerateException("Parameter Error!\n",functionToken);
					  }
				  }
			  } else {
				  if (!gc.globalFunctionMap.get(functionToken.image).checkParameter(new ArrayList<Type>())) {
					  throw new GenerateException("Parameter Error!\n",functionToken);
				  }
			  }
			  
			  if (gc.generate) {
				  
				  
				  
				  
				  int pushSize=0;
				  if (children!=null && children.length>1) {
					  if (children[1]!=null && children[1] instanceof ASTactual_parameter_list) {
						  ASTactual_parameter_list apl=(ASTactual_parameter_list)children[1];
						  if (apl.children!=null) {
							  pushSize=apl.children.length;
							  for (int i=apl.children.length-1;i>=0;--i) { //reverse push
								  if (apl.children[i]!=null && apl.children[i] instanceof ASTactual_parameter) {
									  ASTactual_parameter ap=(ASTactual_parameter)apl.children[i];
									  if (ap.children!=null && ap.children.length==1) {
										  if (ap.children[0]!=null && ap.children[0] instanceof ASTvariable) {
											  Register rg1=((ASTvariable)ap.children[0]).generateCode(gc);
											  gc.code.append(String.format("push %s\n", rg1));
											  rg1.release();
											  continue;
										  }
										  if (ap.children[0]!=null && ap.children[0] instanceof ASTexpression) {
											  Register rg1=((ASTexpression)ap.children[0]).generateCode(gc);
											  gc.code.append(String.format("push %s\n", rg1));
											  rg1.release();
											  continue;
										  }
									  } else {
										  throw new GenerateException("Something Very Bad!\n");
									  }
								  } else {
									  throw new GenerateException("Something Very Bad!\n");
								  }
							  }
						  } else {
							  throw new GenerateException("Something Very Bad!\n");
						  }
					  }
				  }
				  
				  
				  
				  
				  
				  if (!gc.registerManager.checkAllFree()) {
					  throw new GenerateException("Fatal Error:Register not Freed when call!\n",this.currentToken);
				  }
				  gc.code.append(String.format("call %s\n",function_name));
				  if (children!=null && children.length>1) {
					  gc.code.append(String.format("add rsp,%d\n", pushSize*8));
				  }
				  Register rax=gc.registerManager.getRegisterByName("rax");
				  if (!rax.acquire()) {
					  throw new GenerateException("Fatal Error:rax can not acquired!\n",this.currentToken);
				  }
				  return rax;
			  }
			  return gc.registerManager.getRegisterByName("rax");
			  } else {
				  throw new GenerateException("Something Very Bad!\n");
			  }
	  }
	  throw new GenerateException("Something Very Bad!\n");
  }
  
  public Type getType(GeneratorContext gc) throws GenerateException{
	  if (children!=null && children.length>0 && children[0]!=null && children[0] instanceof ASTidentifier) {
		  ASTidentifier aif=(ASTidentifier) children[0];
		  Token tt=aif.getToken();
		  if (gc.globalFunctionMap.containsKey(tt.image)) {
			  return gc.globalFunctionMap.get(tt.image).resultType;
		  } else {
			  throw new GenerateException(String.format("No Such Function '%s'!",tt.image),tt);
		  }
	  }
	  throw new GenerateException("Something Very Bad!\n");
  }

}
/* JavaCC - OriginalChecksum=e38c29b33dd5332502ab135768eab6ba (do not edit this line) */
