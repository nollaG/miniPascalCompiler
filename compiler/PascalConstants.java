/* Generated By:JJTree&JavaCC: Do not edit this line. PascalConstants.java */
package compiler;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PascalConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AND = 7;
  /** RegularExpression Id. */
  int ARRAY = 8;
  /** RegularExpression Id. */
  int BEGIN = 9;
  /** RegularExpression Id. */
  int CASE = 10;
  /** RegularExpression Id. */
  int CONST = 11;
  /** RegularExpression Id. */
  int DIV = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int DOWNTO = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int END = 16;
  /** RegularExpression Id. */
  int FOR = 17;
  /** RegularExpression Id. */
  int FUNCTION = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int MOD = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int OF = 22;
  /** RegularExpression Id. */
  int OR = 23;
  /** RegularExpression Id. */
  int PROCEDURE = 24;
  /** RegularExpression Id. */
  int PROGRAM = 25;
  /** RegularExpression Id. */
  int RECORD = 26;
  /** RegularExpression Id. */
  int REPEAT = 27;
  /** RegularExpression Id. */
  int THEN = 28;
  /** RegularExpression Id. */
  int TO = 29;
  /** RegularExpression Id. */
  int TYPE = 30;
  /** RegularExpression Id. */
  int UNTIL = 31;
  /** RegularExpression Id. */
  int VAR = 32;
  /** RegularExpression Id. */
  int WHILE = 33;
  /** RegularExpression Id. */
  int READLN = 34;
  /** RegularExpression Id. */
  int WRITELN = 35;
  /** RegularExpression Id. */
  int PLUS = 36;
  /** RegularExpression Id. */
  int MINUS = 37;
  /** RegularExpression Id. */
  int STAR = 38;
  /** RegularExpression Id. */
  int SLASH = 39;
  /** RegularExpression Id. */
  int COLON_EQUALS = 40;
  /** RegularExpression Id. */
  int ANDSIGN = 41;
  /** RegularExpression Id. */
  int DOTDOT = 42;
  /** RegularExpression Id. */
  int DOT = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int SEMICOLON = 45;
  /** RegularExpression Id. */
  int COLON = 46;
  /** RegularExpression Id. */
  int QUOTE = 47;
  /** RegularExpression Id. */
  int UP_ARROW = 48;
  /** RegularExpression Id. */
  int EQUALS = 49;
  /** RegularExpression Id. */
  int NOT_EQUALS = 50;
  /** RegularExpression Id. */
  int LESS_THAN = 51;
  /** RegularExpression Id. */
  int LESS_EQUALS = 52;
  /** RegularExpression Id. */
  int GREATER_THAN = 53;
  /** RegularExpression Id. */
  int GREATER_EQUALS = 54;
  /** RegularExpression Id. */
  int LEFT_PAREN = 55;
  /** RegularExpression Id. */
  int RIGHT_PAREN = 56;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 57;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 58;
  /** RegularExpression Id. */
  int LEFT_BRACE = 59;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 60;
  /** RegularExpression Id. */
  int IDENTIFIER = 61;
  /** RegularExpression Id. */
  int STRING = 62;
  /** RegularExpression Id. */
  int INTEGER_NUM = 63;
  /** RegularExpression Id. */
  int REAL_NUM = 64;
  /** RegularExpression Id. */
  int SIGN = 65;
  /** RegularExpression Id. */
  int LETTER = 66;
  /** RegularExpression Id. */
  int DIGIT = 67;
  /** RegularExpression Id. */
  int UNSIGNED_NUMBER = 68;
  /** RegularExpression Id. */
  int WHOLE = 69;
  /** RegularExpression Id. */
  int FRACTION = 70;
  /** RegularExpression Id. */
  int EXPONENT = 71;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"and\"",
    "\"array\"",
    "\"begin\"",
    "\"case\"",
    "\"const\"",
    "\"div\"",
    "\"do\"",
    "\"downto\"",
    "\"else\"",
    "\"end\"",
    "\"for\"",
    "\"function\"",
    "\"if\"",
    "\"mod\"",
    "\"not\"",
    "\"of\"",
    "\"or\"",
    "\"procedure\"",
    "\"program\"",
    "\"record\"",
    "\"repeat\"",
    "\"then\"",
    "\"to\"",
    "\"type\"",
    "\"until\"",
    "\"var\"",
    "\"while\"",
    "\"readln\"",
    "\"writeln\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\":=\"",
    "\"&\"",
    "\"..\"",
    "\".\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"\\\'\"",
    "\"^\"",
    "\"=\"",
    "\"<>\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "<IDENTIFIER>",
    "<STRING>",
    "<INTEGER_NUM>",
    "<REAL_NUM>",
    "<SIGN>",
    "<LETTER>",
    "<DIGIT>",
    "<UNSIGNED_NUMBER>",
    "<WHOLE>",
    "<FRACTION>",
    "<EXPONENT>",
  };

}
