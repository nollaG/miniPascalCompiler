/* Generated By:JJTree: Do not edit this line. ASTexpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package compiler;

import codeGenerator.ArrayType;
import codeGenerator.GenerateException;
import codeGenerator.GeneratorContext;
import codeGenerator.IntegerType;
import codeGenerator.Label;
import codeGenerator.RealType;
import codeGenerator.RecordType;
import codeGenerator.Register;
import codeGenerator.Type;

public
class ASTexpression extends SimpleNode {
  public ASTexpression(int id) {
    super(id);
  }

  public ASTexpression(Pascal p, int id) {
    super(p, id);
  }
  public Register generateCode(GeneratorContext gc) throws GenerateException{//return variable type
	  getType(gc);
	  if (gc.generate) {
		  if (children!=null && children.length==1) {
			  if (children[0]!=null && children[0] instanceof ASTsimple_expression) {
				  return ((ASTsimple_expression)children[0]).generateCode(gc);
			  }
			  throw new GenerateException("Something Very Bad!\n");
		  }
		  if (children!=null && children.length==3) {
			  Register rg1=null,rg2=null;
			  if (children[0]!=null && children[0] instanceof ASTsimple_expression) {
				  rg1=((ASTsimple_expression)children[0]).generateCode(gc);
				  gc.code.append(String.format("push %s\n", rg1));
				  rg1.release();
			  }
			  if (children[2]!=null && children[2] instanceof ASTsimple_expression) {
				  rg2=((ASTsimple_expression)children[2]).generateCode(gc);
			  }
			  if (children[1]!=null && children[1] instanceof ASTrelational_operator) {
				  rg1=gc.registerManager.getFreeRegister();
				  gc.code.append(String.format("pop %s\n", rg1));
				  String opt=((ASTrelational_operator)children[1]).getOpt();
				  if ("=".equals(opt)) {
					  gc.code.append(String.format("cmp %s,%s\n", rg1,rg2));
					  Label l1=gc.labelManager.getNewLabel();
					  Label l2=gc.labelManager.getNewLabel();
					  gc.code.append(String.format("je %s\n", l1));
					  gc.code.append(String.format("mov %s,0\n",rg1));
					  gc.code.append(String.format("jmp %s\n", l2));
					  gc.code.append(String.format("%s: mov %s,1\n", l1,rg1));
					  gc.code.append(String.format("%s: ", l2));
					  rg2.release();
					  return rg1;
				  }
				  if ("<>".equals(opt)) {
					  gc.code.append(String.format("cmp %s,%s\n", rg1,rg2));
					  Label l1=gc.labelManager.getNewLabel();
					  Label l2=gc.labelManager.getNewLabel();
					  gc.code.append(String.format("jne %s\n", l1));
					  gc.code.append(String.format("mov %s,0\n",rg1));
					  gc.code.append(String.format("jmp %s\n", l2));
					  gc.code.append(String.format("%s: mov %s,1\n", l1,rg1));
					  gc.code.append(String.format("%s: ", l2));
					  rg2.release();
					  return rg1;
				  }
				  if ("<".equals(opt)) {
					  gc.code.append(String.format("cmp %s,%s\n", rg1,rg2));
					  Label l1=gc.labelManager.getNewLabel();
					  Label l2=gc.labelManager.getNewLabel();
					  gc.code.append(String.format("jl %s\n", l1));
					  gc.code.append(String.format("mov %s,0\n",rg1));
					  gc.code.append(String.format("jmp %s\n", l2));
					  gc.code.append(String.format("%s: mov %s,1\n", l1,rg1));
					  gc.code.append(String.format("%s: ", l2));
					  rg2.release();
					  return rg1;
				  }
				  if ("<=".equals(opt)) {
					  gc.code.append(String.format("cmp %s,%s\n", rg1,rg2));
					  Label l1=gc.labelManager.getNewLabel();
					  Label l2=gc.labelManager.getNewLabel();
					  gc.code.append(String.format("jle %s\n", l1));
					  gc.code.append(String.format("mov %s,0\n",rg1));
					  gc.code.append(String.format("jmp %s\n", l2));
					  gc.code.append(String.format("%s: mov %s,1\n", l1,rg1));
					  gc.code.append(String.format("%s: ", l2));
					  rg2.release();
					  return rg1;
				  }
				  if (">".equals(opt)) {
					  gc.code.append(String.format("cmp %s,%s\n", rg1,rg2));
					  Label l1=gc.labelManager.getNewLabel();
					  Label l2=gc.labelManager.getNewLabel();
					  gc.code.append(String.format("jg %s\n", l1));
					  gc.code.append(String.format("mov %s,0\n",rg1));
					  gc.code.append(String.format("jmp %s\n", l2));
					  gc.code.append(String.format("%s: mov %s,1\n", l1,rg1));
					  gc.code.append(String.format("%s: ", l2));
					  rg2.release();
					  return rg1;
				  }
				  if (">=".equals(opt)) {
					  gc.code.append(String.format("cmp %s,%s\n", rg1,rg2));
					  Label l1=gc.labelManager.getNewLabel();
					  Label l2=gc.labelManager.getNewLabel();
					  gc.code.append(String.format("jge %s\n", l1));
					  gc.code.append(String.format("mov %s,0\n",rg1));
					  gc.code.append(String.format("jmp %s\n", l2));
					  gc.code.append(String.format("%s: mov %s,1\n", l1,rg1));
					  gc.code.append(String.format("%s: ", l2));
					  rg2.release();
					  return rg1;
				  }
			  }
		  }
	  }
	  return null;
  }
  public Type getType(GeneratorContext gc) throws GenerateException{
	  if (children!=null && children.length==1) {
		  if (children[0]!=null && children[0] instanceof ASTsimple_expression) {
			  return ((ASTsimple_expression)children[0]).getType(gc);
		  }
		  throw new GenerateException("Something Very Bad!\n");
	  }
	  if (children!=null && children.length==3) {
		  Type type1=null,type2=null;
		  if (children[0]!=null && children[0] instanceof ASTsimple_expression) {
			  type1=((ASTsimple_expression)children[0]).getType(gc);
		  } else {
			  throw new GenerateException("Something Very Bad!\n");
		  }
		  if (children[2]!=null && children[2] instanceof ASTsimple_expression) {
			  type2=((ASTsimple_expression)children[2]).getType(gc);
		  } else {
			  throw new GenerateException("Something Very Bad!\n");
		  }
		  if (type1 instanceof RecordType || type1 instanceof ArrayType) {
			  throw new GenerateException("Can not Compare with NonSimpleType!",((SimpleNode)children[0]).currentToken);
		  }
		  if (type2 instanceof RecordType || type2 instanceof ArrayType) {
			  throw new GenerateException("Can not Compare with NonSimpleType!",((SimpleNode)children[2]).currentToken);
		  }
		  if (type1 instanceof RealType) {
			  return type1;
		  }
	      if (type2 instanceof RealType) {
			  return type2;
		  }
		  if (type1 instanceof IntegerType) {
			  return type1;
		  }
	      if (type2 instanceof IntegerType) {
			  return type2;
		  }
	      return type1;
		  
	  }
	  throw new GenerateException("Something Very Bad!\n");
  }

}
/* JavaCC - OriginalChecksum=777c377c7a42d1131b79203153768a3c (do not edit this line) */
