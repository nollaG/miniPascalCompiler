/* Generated By:JJTree: Do not edit this line. ASTAdditionNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package compiler;

import codeGenerator.ArrayType;
import codeGenerator.GenerateException;
import codeGenerator.GeneratorContext;
import codeGenerator.IntegerType;
import codeGenerator.RealType;
import codeGenerator.RecordType;
import codeGenerator.Register;
import codeGenerator.Type;

public
class ASTAdditionNode extends SimpleNode {
  public ASTAdditionNode(int id) {
    super(id);
  }

  public ASTAdditionNode(Pascal p, int id) {
    super(p, id);
  }

  public Register generateCode(GeneratorContext gc) throws GenerateException{
	  getType(gc);
	  if (gc.generate) {
		  Register rg1=null,rg2=null;
		  if (children!=null && children.length==3) {
			  if (children[0]!=null && children[0] instanceof ASTAdditionNode) {
				  rg1=((ASTAdditionNode)children[0]).generateCode(gc);
				  gc.code.append(String.format("push %s\n",rg1));
				  rg1.release();
			  }
			  if (children[0]!=null && children[0] instanceof ASTterm) {
				  rg1=((ASTterm)children[0]).generateCode(gc);
				  gc.code.append(String.format("push %s\n",rg1));
				  rg1.release();
			  }
			  if (children[2]!=null && children[2] instanceof ASTterm) {
				  rg2=((ASTterm)children[2]).generateCode(gc);
			  }
			  if (children[1]!=null && children[1] instanceof ASTaddition_operator) {
				  String opt=((ASTaddition_operator)children[1]).getOpt();
				  if ("+".equals(opt)) {
					  rg1=gc.registerManager.getFreeRegister();
					  gc.code.append(String.format("pop %s\n",rg1));
					  gc.code.append(String.format("add %s,%s\n",rg1,rg2));
					  rg2.release();
					  return rg1;
				  }
				  if ("-".equals(opt)) {
					  rg1=gc.registerManager.getFreeRegister();
					  gc.code.append(String.format("pop %s\n",rg1));
					  gc.code.append(String.format("sub %s,%s\n",rg1,rg2));
					  rg2.release();
					  return rg1;
				  }
				  if ("or".equals(opt)) {
					  rg1=gc.registerManager.getFreeRegister();
					  gc.code.append(String.format("pop %s\n",rg1));
					  gc.code.append(String.format("sub %s,%s\n",rg1,rg2));
					  rg2.release();
					  return rg1;
				  }
				  throw new GenerateException("Something Very Bad!\n");
			  } else {
				  throw new GenerateException("Something Very Bad!\n");
			  }
		  }
	  }
	  return null;
  }
  public Type getType(GeneratorContext gc) throws GenerateException{
	  if (children!=null && children.length==3) {
		  Type type1=null,type2=null;
		  if (children[0]!=null && children[0] instanceof ASTAdditionNode) {
			  type1=((ASTAdditionNode)children[0]).getType(gc);
		  }
		  if (children[0]!=null && children[0] instanceof ASTterm) {
			  type1=((ASTterm)children[0]).getType(gc);
		  }
		  if (children[2]!=null && children[2] instanceof ASTterm) {
			  type2=((ASTterm)children[2]).getType(gc);
		  }
		  if (gc.generate) {
		      if (!(type1 instanceof IntegerType)) {
				  throw new GenerateException("Can not calculate with Non-integer Type!",((SimpleNode)children[0]).currentToken);
			  }
		      if (!(type2 instanceof IntegerType)) {
				  throw new GenerateException("Can not calculate with Non-integer Type!",((SimpleNode)children[2]).currentToken);
			  }
		      return type1;
		  }
		  if (type1 instanceof RecordType || type1 instanceof ArrayType) {
			  throw new GenerateException("Can not calculate with NonSimpleType!",((SimpleNode)children[0]).currentToken);
		  }
		  if (type2 instanceof RecordType || type2 instanceof ArrayType) {
			  throw new GenerateException("Can not calculate with NonSimpleType!",((SimpleNode)children[2]).currentToken);
		  }
		  if (type1 instanceof RealType) {
			  return type1;
		  }
		  if (type2 instanceof RealType) {
			  return type2;
		  }
		  if (type1 instanceof IntegerType) {
			  return type1;
		  }
		  if (type2 instanceof IntegerType) {
			  return type2;
		  }
	      return type1;
	  }
	  throw new GenerateException("Something Very Bad!\n");
  }
}
/* JavaCC - OriginalChecksum=f7c74dca708b9f358f5d71c2919a6da9 (do not edit this line) */
