/* Generated By:JJTree: Do not edit this line. ASTnumber.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package compiler;

import codeGenerator.GenerateException;
import codeGenerator.GeneratorContext;
import codeGenerator.Register;
import codeGenerator.Type;

public
class ASTnumber extends SimpleNode {
  public ASTnumber(int id) {
    super(id);
  }

  public ASTnumber(Pascal p, int id) {
    super(p, id);
  }
  
  
  public Register generateCode(GeneratorContext gc) throws GenerateException{
	  getType(gc);
	  if (gc.generate) {
		  if (children!=null && children.length==1) {
			  Register dst=gc.registerManager.getFreeRegister();
			  if (children[0]!=null && children[0] instanceof ASTinteger_number) {
				  gc.code.append(String.format("mov %s,%d\n",dst.toString(),((ASTinteger_number)children[0]).getNum()));
			  }
			  if (children[0]!=null && children[0] instanceof ASTreal_number) {
				  gc.code.append(String.format("mov %s,%f\n",dst.toString(),((ASTreal_number)children[0]).getNum()));
			  }
			  return dst;
		  }
	  }
	  return null;
  }
  
  public Type getType(GeneratorContext gc) throws GenerateException{
	  if (children!=null && children.length==1) {
		  if (children[0]!=null && children[0] instanceof ASTinteger_number) {
			  if (gc.globalTypeMap.containsKey("integer")) {
				  return gc.globalTypeMap.get("integer");
			  } else {
				  throw new GenerateException("No integer Type,What are you thinking about!\n");
			  }
		  }
		  if (children[0]!=null && children[0] instanceof ASTreal_number) {
			  if (gc.globalTypeMap.containsKey("real")) {
				  return gc.globalTypeMap.get("real");
			  } else {
				  throw new GenerateException("No real Type,What are you thinking about!\n");
			  }
		  }
	  }
	  throw new GenerateException("Something Very Bad!\n");
  }
  


}
/* JavaCC - OriginalChecksum=b6d9d9cec60c21c77dcb64e085f43e67 (do not edit this line) */
